class Solution
{
public:
    bool is_palindrome(string str)
    {
        int i, j;
        i = 0;
        j = str.size() - 1;
        bool flag = true;
        while (i <= j)
        {
            if (str[i] != str[j])
            {
                flag = false;
                break;
            }
            i++;
            j--;
        }
        return flag;
    }
    void helper(int i, string s, vector<string> temp, vector<vector<string>> &res)
    {
        if (i >= s.size())
        {
            res.push_back(temp);
            return;
        }

        string current_char = string(1, s[i]);
        temp.push_back(current_char);
        helper(i + 1, s, temp, res);
        temp.pop_back();
        string str = current_char;
        for (int j = i + 1; j < s.size(); j++)
        {
            str += string(1, s[j]);
            if (this->is_palindrome(str))
            {
                temp.push_back(str);
                helper(j + 1, s, temp, res);
                temp.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s)
    {
        vector<vector<string>> res;
        this->helper(0, s, {}, res);
        return res;
    }
};